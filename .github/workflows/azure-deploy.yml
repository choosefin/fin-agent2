name: Deploy to Azure App Service

on:
  push:
    branches:
      - main
      - master
  # Remove pull_request trigger - we don't want to deploy on PRs
  workflow_dispatch:  # Manual trigger for emergency deployments

env:
  AZURE_WEBAPP_NAME_BACKEND: finagent-backend-pps457j4wjrc6
  AZURE_WEBAPP_NAME_FRONTEND: finagent-web-pps457j4wjrc6
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    environment:
      name: 'production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      continue-on-error: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile --filter=backend... || pnpm install --no-frozen-lockfile --filter=backend...

    - name: Build backend
      run: |
        pnpm run build --filter=backend || echo "Build script not found, skipping build"

    - name: Create deployment package
      run: |
        cd apps/backend
        # Remove Windows deployment files that cause issues on Linux
        rm -f .deployment deploy.cmd
        
        # Create a startup script for Azure Linux App Service
        cat > startup.sh << 'BACKEND_EOF'
        #!/bin/bash
        echo "Starting Motia backend application..."
        cd /home/site/wwwroot
        
        # Install dependencies if node_modules doesn't exist
        if [ ! -d "node_modules" ]; then
            echo "Installing dependencies..."
            npm ci --only=production
        fi
        
        # Use npx to run Motia commands (avoids global installation)
        echo "Building Motia backend..."
        npx motia build || echo "Build completed or not required"
        
        # Start the application using npx in production mode
        echo "Starting Motia on port \${PORT:-3001}..."
        PORT=\${PORT:-3001} npx motia start --host 0.0.0.0
        BACKEND_EOF
        
        chmod +x startup.sh
        
        # Remove Windows-specific files
        rm -f deploy.cmd .deployment
        
        # Create deployment package INCLUDING node_modules for Motia
        zip -r deploy.zip . \
          -x "*.git*" \
          -x "*.env*" \
          -x "*test*" \
          -x "*.md" \
          -x ".DS_Store" \
          -x "node_modules/.cache/*"

    - name: Configure Backend App Service
      run: |
        # Extract resource group from app name or use default
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "Warning: AZURE_RESOURCE_GROUP secret not set, using default"
          RESOURCE_GROUP="finagent-rg"
        fi
        echo "Using resource group: $RESOURCE_GROUP"
        
        # Disable Oryx build
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME_BACKEND }} \
          --resource-group "$RESOURCE_GROUP" \
          --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                    ENABLE_ORYX_BUILD=false || true
        
        # Remove WEBSITE_RUN_FROM_PACKAGE if it exists
        az webapp config appsettings delete \
          --name ${{ env.AZURE_WEBAPP_NAME_BACKEND }} \
          --resource-group "$RESOURCE_GROUP" \
          --setting-names WEBSITE_RUN_FROM_PACKAGE 2>/dev/null || true
        
        # Stop and restart to clear any locks
        az webapp stop --name ${{ env.AZURE_WEBAPP_NAME_BACKEND }} \
          --resource-group "$RESOURCE_GROUP" || true
        sleep 5
        az webapp start --name ${{ env.AZURE_WEBAPP_NAME_BACKEND }} \
          --resource-group "$RESOURCE_GROUP" || true
      continue-on-error: true
    
    - name: Deploy Backend to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME_BACKEND }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}
        package: apps/backend/deploy.zip
        clean: true
        restart: true
      timeout-minutes: 10
      continue-on-error: true
      id: deploy-backend
    
    - name: Retry Backend Deployment if Failed
      if: steps.deploy-backend.outcome == 'failure'
      run: |
        echo "First deployment attempt failed, waiting 30 seconds before retry..."
        sleep 30
        
        # Extract resource group from app name or use default
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "Warning: AZURE_RESOURCE_GROUP secret not set, trying to extract from app"
          # Try to get resource group from the app itself
          RESOURCE_GROUP=$(az webapp list --query "[?name=='${{ env.AZURE_WEBAPP_NAME_BACKEND }}'].resourceGroup" -o tsv 2>/dev/null || echo "")
          if [ -z "$RESOURCE_GROUP" ]; then
            echo "Could not determine resource group, using default: finagent-rg"
            RESOURCE_GROUP="finagent-rg"
          fi
        fi
        echo "Using resource group: $RESOURCE_GROUP"
        
        # Try using Azure CLI directly
        az webapp deployment source config-zip \
          --resource-group "$RESOURCE_GROUP" \
          --name ${{ env.AZURE_WEBAPP_NAME_BACKEND }} \
          --src apps/backend/deploy.zip \
          --timeout 600 || exit 1

  build-and-deploy-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    environment:
      name: 'production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      continue-on-error: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile --filter=web... || pnpm install --no-frozen-lockfile --filter=web...

    - name: Build frontend
      run: |
        cd apps/web
        # Build Next.js in standalone mode
        pnpm build
      env:
        NEXT_PUBLIC_API_URL: https://${{ env.AZURE_WEBAPP_NAME_BACKEND }}.azurewebsites.net
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://fuaogvgmdgndldimnnrs.supabase.co' }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ1YW9ndmdtZGduZGxkaW1ubnJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM4NTU4OTAsImV4cCI6MjA0OTQzMTg5MH0.vFq6l6zVbG3M7MJBCymVcjJXNPiCrBvPBfqDOvLxvxo' }}
        SKIP_BUILD_PRODUCT_REDIRECTS: 1
        NODE_ENV: production

    - name: Create deployment package
      run: |
        cd apps/web
        
        # Next.js standalone build creates a self-contained app
        if [ -d ".next/standalone" ]; then
          echo "Using Next.js standalone build"
          mkdir -p deploy-package
          
          # For monorepo: copy the app-specific files
          if [ -d ".next/standalone/apps/web" ]; then
            echo "Monorepo structure detected"
            cp -r .next/standalone/apps/web/* deploy-package/
            cp -r .next/standalone/apps/web/.next deploy-package/ 2>/dev/null || true
            
            # CRITICAL: Copy node_modules from standalone root
            if [ -d ".next/standalone/node_modules" ]; then
              echo "Copying standalone node_modules..."
              # First copy everything including pnpm structure
              cp -r .next/standalone/node_modules deploy-package/
              
              # Check if we have pnpm structure that needs fixing
              if [ -d "deploy-package/node_modules/.pnpm" ]; then
                echo "Detected pnpm structure, converting to flat node_modules for Azure..."
                
                # Remove all existing symlinks first
                find deploy-package/node_modules -maxdepth 1 -type l -delete
                
                # Copy ALL packages from .pnpm structure to root node_modules
                # This ensures all dependencies are available, not just the main ones
                for pnpm_pkg in deploy-package/node_modules/.pnpm/*/node_modules/*; do
                  if [ -d "$pnpm_pkg" ]; then
                    pkg_name=$(basename "$pnpm_pkg")
                    target="deploy-package/node_modules/$pkg_name"
                    
                    # Skip if already exists (first occurrence wins)
                    if [ ! -e "$target" ]; then
                      echo "Copying $pkg_name from pnpm structure..."
                      cp -r "$pnpm_pkg" "$target"
                    fi
                  fi
                done
                
                # Special handling for scoped packages (@org/package)
                for scope_dir in deploy-package/node_modules/.pnpm/*/node_modules/@*; do
                  if [ -d "$scope_dir" ]; then
                    scope_name=$(basename "$scope_dir")
                    mkdir -p "deploy-package/node_modules/$scope_name"
                    
                    for scoped_pkg in "$scope_dir"/*; do
                      if [ -d "$scoped_pkg" ]; then
                        pkg_name=$(basename "$scoped_pkg")
                        target="deploy-package/node_modules/$scope_name/$pkg_name"
                        
                        if [ ! -e "$target" ]; then
                          echo "Copying $scope_name/$pkg_name from pnpm structure..."
                          cp -r "$scoped_pkg" "$target"
                        fi
                      fi
                    done
                  fi
                done
                
                echo "Finished converting pnpm structure to flat node_modules"
              fi
            fi
          else
            echo "Standard structure"
            cp -rL .next/standalone/* deploy-package/
          fi
          
          # Copy static files separately (not included in standalone)
          cp -r .next/static deploy-package/.next/ 2>/dev/null || true
          cp -r public deploy-package/ 2>/dev/null || true
          
        else
          echo "Standalone build not found, using regular build"
          mkdir -p deploy-package
          
          # Copy the built app
          cp -r .next deploy-package/
          cp -r public deploy-package/ 2>/dev/null || true
          cp package.json deploy-package/
          
          # Copy minimal node_modules
          mkdir -p deploy-package/node_modules
          for dep in next react react-dom; do
            if [ -d "node_modules/$dep" ]; then
              cp -r "node_modules/$dep" deploy-package/node_modules/
            fi
          done
        fi
        
        # Create startup script
        cat > deploy-package/startup.sh << 'STARTUP_EOF'
        #!/bin/bash
        echo "=== Starting Next.js server ==="
        cd /home/site/wwwroot
        
        # Debug: Show what files are present
        echo "Files in /home/site/wwwroot:"
        ls -la
        
        # Check for node_modules - standalone build should have them
        if [ ! -d "node_modules" ]; then
            echo "ERROR: node_modules not found for standalone build!"
            echo "This is a critical error - standalone builds must include node_modules"
            
            # Try recovery by checking common Azure locations
            if [ -d "/node_modules" ]; then
                echo "Found node_modules at /node_modules, creating symlink..."
                ln -sfn /node_modules ./node_modules
            elif [ -f "node_modules.tar.gz" ]; then
                echo "Found node_modules.tar.gz, extracting..."
                tar -xzf node_modules.tar.gz
            else
                echo "FATAL: Cannot find node_modules anywhere!"
                exit 1
            fi
        else
            echo "✓ node_modules directory found"
        fi
        
        # Check if this is a standalone build
        if [ -f "server.js" ]; then
            echo "Starting Next.js standalone server on port ${PORT:-8080}..."
            PORT=${PORT:-8080} node server.js
        else
            echo "ERROR: server.js not found!"
            echo "Available files:"
            ls -la
            exit 1
        fi
        STARTUP_EOF
        chmod +x deploy-package/startup.sh
        
        # CRITICAL: Add deployment configuration at root level
        cat > deploy-package/.deployment << 'EOF'
        [config]
        SCM_DO_BUILD_DURING_DEPLOYMENT = false
        EOF
        
        # Add package.json with start script (required by Azure)
        cat > deploy-package/package.json << 'EOF'
        {
          "name": "web",
          "version": "1.0.0",
          "scripts": {
            "start": "bash startup.sh"
          }
        }
        EOF
        
        # Add .do-not-run-on-build flag
        touch deploy-package/.do-not-run-on-build
        
        cd deploy-package
        
        # CRITICAL: Include node_modules in the package for standalone build
        # Create deployment package with .deployment at root
        zip -r ../deploy.zip . \
          -x "*.git*" \
          -x "*.env*" \
          -x ".next/cache/*" \
          -x "*test*" \
          -x "*.md" \
          -x ".DS_Store" \
          -x "node_modules/.cache/*"

    - name: Configure Frontend App Service
      run: |
        # Extract resource group from app name or use default
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "Warning: AZURE_RESOURCE_GROUP secret not set, using default"
          RESOURCE_GROUP="finagent-rg"
        fi
        echo "Using resource group: $RESOURCE_GROUP"
        
        # Disable Oryx build
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME_FRONTEND }} \
          --resource-group "$RESOURCE_GROUP" \
          --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                    ENABLE_ORYX_BUILD=false || true
        
        # Remove WEBSITE_RUN_FROM_PACKAGE if it exists
        az webapp config appsettings delete \
          --name ${{ env.AZURE_WEBAPP_NAME_FRONTEND }} \
          --resource-group "$RESOURCE_GROUP" \
          --setting-names WEBSITE_RUN_FROM_PACKAGE 2>/dev/null || true
        
        # Stop and restart to clear any locks
        az webapp stop --name ${{ env.AZURE_WEBAPP_NAME_FRONTEND }} \
          --resource-group "$RESOURCE_GROUP" || true
        sleep 5
        az webapp start --name ${{ env.AZURE_WEBAPP_NAME_FRONTEND }} \
          --resource-group "$RESOURCE_GROUP" || true
      continue-on-error: true
    
    - name: Deploy Frontend to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME_FRONTEND }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_FRONTEND }}
        package: apps/web/deploy.zip
        clean: true
        restart: true
      timeout-minutes: 10
      continue-on-error: true
      id: deploy-frontend
    
    - name: Retry Frontend Deployment if Failed
      if: steps.deploy-frontend.outcome == 'failure'
      run: |
        echo "First deployment attempt failed, waiting 30 seconds before retry..."
        sleep 30
        
        # Extract resource group from app name or use default
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "Warning: AZURE_RESOURCE_GROUP secret not set, trying to extract from app"
          # Try to get resource group from the app itself
          RESOURCE_GROUP=$(az webapp list --query "[?name=='${{ env.AZURE_WEBAPP_NAME_FRONTEND }}'].resourceGroup" -o tsv 2>/dev/null || echo "")
          if [ -z "$RESOURCE_GROUP" ]; then
            echo "Could not determine resource group, using default: finagent-rg"
            RESOURCE_GROUP="finagent-rg"
          fi
        fi
        echo "Using resource group: $RESOURCE_GROUP"
        
        # Try using Azure CLI directly
        az webapp deployment source config-zip \
          --resource-group "$RESOURCE_GROUP" \
          --name ${{ env.AZURE_WEBAPP_NAME_FRONTEND }} \
          --src apps/web/deploy.zip \
          --timeout 600 || exit 1

  configure-app-settings:
    name: Configure App Settings
    needs: [build-and-deploy-backend, build-and-deploy-frontend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Backend App Settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME_BACKEND }}
        app-settings-json: |
          [
            {
              "name": "NODE_ENV",
              "value": "production"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~20"
            },
            {
              "name": "WEBSITE_STARTUP_FILE",
              "value": "startup.sh"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "false"
            },
            {
              "name": "ENABLE_ORYX_BUILD",
              "value": "false"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0"
            },
            {
              "name": "POST_BUILD_COMMAND",
              "value": ""
            }
          ]

    - name: Set Frontend App Settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME_FRONTEND }}
        app-settings-json: |
          [
            {
              "name": "NODE_ENV",
              "value": "production"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~20"
            },
            {
              "name": "WEBSITE_STARTUP_FILE",
              "value": "startup.sh"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "false"
            },
            {
              "name": "ENABLE_ORYX_BUILD",
              "value": "false"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0"
            },
            {
              "name": "POST_BUILD_COMMAND",
              "value": ""
            },
            {
              "name": "NEXT_PUBLIC_SUPABASE_URL",
              "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://fuaogvgmdgndldimnnrs.supabase.co' }}"
            },
            {
              "name": "NEXT_PUBLIC_SUPABASE_ANON_KEY",
              "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ1YW9ndmdtZGduZGxkaW1ubnJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM4NTU4OTAsImV4cCI6MjA0OTQzMTg5MH0.vFq6l6zVbG3M7MJBCymVcjJXNPiCrBvPBfqDOvLxvxo' }}"
            },
            {
              "name": "NEXT_PUBLIC_API_URL",
              "value": "https://${{ env.AZURE_WEBAPP_NAME_BACKEND }}.azurewebsites.net"
            }
          ]