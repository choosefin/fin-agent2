name: Deploy to Azure App Service

on:
  push:
    branches:
      - main
      - master
  # Remove pull_request trigger - we don't want to deploy on PRs
  workflow_dispatch:  # Manual trigger for emergency deployments

env:
  AZURE_WEBAPP_NAME_BACKEND: finagent-backend-pps457j4wjrc6
  AZURE_WEBAPP_NAME_FRONTEND: finagent-web-pps457j4wjrc6
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    environment:
      name: 'production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      continue-on-error: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup npm cache
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install dependencies
      run: |
        cd apps/backend
        npm ci || npm install

    - name: Build backend
      run: |
        cd apps/backend
        # Pre-build Motia to avoid timeout during Azure startup
        npx motia build || echo "Motia build completed or not required"
        npm run build || echo "Build script not found, skipping build"

    - name: Create deployment package
      run: |
        cd apps/backend
        # Remove Windows deployment files that cause issues on Linux
        rm -f .deployment deploy.cmd
        
        # Create a startup script for Azure Linux App Service
        cat > startup.sh << 'BACKEND_EOF'
        #!/bin/bash
        set -e  # Exit on error
        echo "Starting Motia backend application..."
        cd /home/site/wwwroot
        
        # Install dependencies if node_modules doesn't exist
        if [ ! -d "node_modules" ]; then
            echo "ERROR: node_modules not found - this should have been included in deployment"
            echo "Attempting emergency install..."
            npm ci --only=production --no-audit --no-fund || npm install --only=production --no-audit --no-fund
        fi
        
        # Check if Motia is available
        if ! npx motia --version > /dev/null 2>&1; then
            echo "ERROR: Motia not found, installing..."
            npm install @motia/core @motia/cli --no-save --no-audit --no-fund
        fi
        
        # Motia should already be built during CI/CD
        # Start with increased memory and timeout handling
        echo "Starting Motia on port \${PORT:-3001}..."
        export NODE_OPTIONS="--max-old-space-size=2048"
        PORT=\${PORT:-3001} timeout 300 npx motia start --host 0.0.0.0 || {
            echo "ERROR: Failed to start Motia within 5 minutes"
            echo "Attempting direct node start as fallback..."
            PORT=\${PORT:-3001} node node_modules/@motia/cli/dist/index.js start --host 0.0.0.0
        }
        BACKEND_EOF
        
        chmod +x startup.sh
        
        # Remove Windows-specific files
        rm -f deploy.cmd .deployment
        
        # Create deployment package INCLUDING node_modules for Motia
        # Also include the built Motia files
        zip -r deploy.zip . \
          -x "*.git*" \
          -x "*.env*" \
          -x "*test*" \
          -x "*.md" \
          -x ".DS_Store" \
          -x "node_modules/.cache/*" \
          -x "node_modules/.bin/*"

    - name: Configure Backend App Service
      run: |
        # Extract resource group from app name or use default
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "Warning: AZURE_RESOURCE_GROUP secret not set, using default"
          RESOURCE_GROUP="finagent-rg"
        fi
        echo "Using resource group: $RESOURCE_GROUP"
        
        # Disable Oryx build
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME_BACKEND }} \
          --resource-group "$RESOURCE_GROUP" \
          --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                    ENABLE_ORYX_BUILD=false || true
        
        # Remove WEBSITE_RUN_FROM_PACKAGE if it exists
        az webapp config appsettings delete \
          --name ${{ env.AZURE_WEBAPP_NAME_BACKEND }} \
          --resource-group "$RESOURCE_GROUP" \
          --setting-names WEBSITE_RUN_FROM_PACKAGE 2>/dev/null || true
        
        # Stop and restart to clear any locks
        az webapp stop --name ${{ env.AZURE_WEBAPP_NAME_BACKEND }} \
          --resource-group "$RESOURCE_GROUP" || true
        sleep 5
        az webapp start --name ${{ env.AZURE_WEBAPP_NAME_BACKEND }} \
          --resource-group "$RESOURCE_GROUP" || true
      continue-on-error: true
    
    - name: Deploy Backend to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME_BACKEND }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}
        package: apps/backend/deploy.zip
        clean: true
        restart: true
      timeout-minutes: 15
      continue-on-error: true
      id: deploy-backend
    
    - name: Retry Backend Deployment if Failed
      if: steps.deploy-backend.outcome == 'failure'
      run: |
        echo "First deployment attempt failed, waiting 30 seconds before retry..."
        sleep 30
        
        # Extract resource group from app name or use default
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "Warning: AZURE_RESOURCE_GROUP secret not set, trying to extract from app"
          # Try to get resource group from the app itself
          RESOURCE_GROUP=$(az webapp list --query "[?name=='${{ env.AZURE_WEBAPP_NAME_BACKEND }}'].resourceGroup" -o tsv 2>/dev/null || echo "")
          if [ -z "$RESOURCE_GROUP" ]; then
            echo "Could not determine resource group, using default: finagent-rg"
            RESOURCE_GROUP="finagent-rg"
          fi
        fi
        echo "Using resource group: $RESOURCE_GROUP"
        
        # Try using Azure CLI directly
        az webapp deployment source config-zip \
          --resource-group "$RESOURCE_GROUP" \
          --name ${{ env.AZURE_WEBAPP_NAME_BACKEND }} \
          --src apps/backend/deploy.zip \
          --timeout 900 || exit 1

  build-and-deploy-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    environment:
      name: 'production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      continue-on-error: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup npm cache
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install dependencies
      run: |
        cd apps/web
        npm ci || npm install

    - name: Build frontend
      run: |
        cd apps/web
        
        # Remove any conflicting app directory
        rm -rf app/
        
        # Build Next.js in standalone mode
        npm run build
        
        # Verify standalone build was created
        if [ ! -d ".next/standalone" ]; then
          echo "ERROR: Standalone build not created!"
          ls -la .next/
          exit 1
        fi
      env:
        NEXT_PUBLIC_API_URL: https://${{ env.AZURE_WEBAPP_NAME_BACKEND }}.azurewebsites.net
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://fuaogvgmdgndldimnnrs.supabase.co' }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ1YW9ndmdtZGduZGxkaW1ubnJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM4NTU4OTAsImV4cCI6MjA0OTQzMTg5MH0.vFq6l6zVbG3M7MJBCymVcjJXNPiCrBvPBfqDOvLxvxo' }}
        SKIP_BUILD_PRODUCT_REDIRECTS: 1
        NODE_ENV: production

    - name: Create deployment package
      run: |
        cd apps/web
        
        # Next.js standalone build creates a self-contained app
        if [ -d ".next/standalone" ]; then
          echo "Using Next.js standalone build"
          mkdir -p deploy-package
          
          # For monorepo: copy ALL files from standalone
          if [ -d ".next/standalone/apps/web" ]; then
            echo "Monorepo structure detected"
            # Copy the entire standalone output
            cp -r .next/standalone/* deploy-package/
            
            # Ensure .next directory from app is in the right place
            if [ ! -d "deploy-package/.next" ] && [ -d ".next/standalone/apps/web/.next" ]; then
              echo "Moving .next directory to root"
              cp -r .next/standalone/apps/web/.next deploy-package/
            fi
          else
            echo "Standard structure"
            cp -rL .next/standalone/* deploy-package/
          fi
          
          # Copy static files (CRITICAL - must be at correct path)
          echo "Copying static files..."
          if [ -d "deploy-package/apps/web/.next" ]; then
            # Monorepo structure - ensure static files are in the right place
            mkdir -p deploy-package/apps/web/.next
            cp -r .next/static deploy-package/apps/web/.next/static 2>/dev/null || true
            cp -r public deploy-package/apps/web/public 2>/dev/null || true
          else
            # Standard structure
            mkdir -p deploy-package/.next
            cp -r .next/static deploy-package/.next/static 2>/dev/null || true
            cp -r public deploy-package/public 2>/dev/null || true
          fi
          
          # Copy our custom server.js wrapper to root
          cp server.js deploy-package/server.js 2>/dev/null || true
          
          # Debug: Show structure
          echo "Deployment package structure:"
          find deploy-package -type f -name "server.js" | head -5
          find deploy-package -type d -name ".next" | head -5
          
        else
          echo "ERROR: Standalone build not found!"
          echo "Contents of .next directory:"
          ls -la .next/
          exit 1
        fi
        
        # Create startup script
        cat > deploy-package/startup.sh << 'STARTUP_EOF'
        #!/bin/bash
        echo "=== Starting Next.js server on Azure ==="
        cd /home/site/wwwroot
        
        # Debug: Show environment
        echo "Environment variables:"
        echo "NODE_ENV: ${NODE_ENV}"
        echo "PORT: ${PORT:-8080}"
        echo "WEBSITES_PORT: ${WEBSITES_PORT}"
        echo "NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}"
        
        # Debug: Show what files are present
        echo ""
        echo "Files in /home/site/wwwroot:"
        ls -la
        
        # Set required environment variables
        export NODE_ENV=production
        export PORT=${WEBSITES_PORT:-${PORT:-8080}}
        export HOSTNAME="0.0.0.0"
        
        # Check for standalone server.js in different locations
        if [ -f "apps/web/server.js" ]; then
            echo "Starting monorepo Next.js server..."
            cd apps/web
            exec node server.js
        elif [ -f "server.js" ]; then
            echo "Starting server.js from root..."
            exec node server.js
        elif [ -f ".next/standalone/server.js" ]; then
            echo "Starting Next.js standalone server directly..."
            cd .next/standalone
            exec node server.js
        elif [ -f ".next/standalone/apps/web/server.js" ]; then
            echo "Starting monorepo Next.js standalone server..."
            cd .next/standalone/apps/web
            exec node server.js
        else
            echo "ERROR: No server.js found!"
            echo "Checking .next directory structure:"
            ls -la .next/ 2>/dev/null || echo ".next not found"
            echo ""
            echo "Checking for standalone build:"
            ls -la .next/standalone/ 2>/dev/null || echo "No standalone build found"
            
            # Last resort - try to start with npx
            if [ -f "package.json" ] && [ -d "node_modules" ]; then
                echo "Attempting to start with npx next start..."
                exec npx next start -H 0.0.0.0 -p ${PORT}
            else
                echo "FATAL: Cannot start Next.js application"
                exit 1
            fi
        fi
        STARTUP_EOF
        chmod +x deploy-package/startup.sh
        
        # CRITICAL: Add deployment configuration at root level
        cat > deploy-package/.deployment << 'EOF'
        [config]
        SCM_DO_BUILD_DURING_DEPLOYMENT = false
        EOF
        
        # Add package.json with start script (required by Azure)
        cat > deploy-package/package.json << 'EOF'
        {
          "name": "web",
          "version": "1.0.0",
          "scripts": {
            "start": "bash startup.sh"
          }
        }
        EOF
        
        # Add .do-not-run-on-build flag
        touch deploy-package/.do-not-run-on-build
        
        cd deploy-package
        
        # CRITICAL: Include node_modules in the package for standalone build
        # Create deployment package with .deployment at root
        zip -r ../deploy.zip . \
          -x "*.git*" \
          -x "*.env*" \
          -x ".next/cache/*" \
          -x "*test*" \
          -x "*.md" \
          -x ".DS_Store" \
          -x "node_modules/.cache/*"

    - name: Configure Frontend App Service
      run: |
        # Extract resource group from app name or use default
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "Warning: AZURE_RESOURCE_GROUP secret not set, using default"
          RESOURCE_GROUP="finagent-rg"
        fi
        echo "Using resource group: $RESOURCE_GROUP"
        
        # Disable Oryx build
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME_FRONTEND }} \
          --resource-group "$RESOURCE_GROUP" \
          --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                    ENABLE_ORYX_BUILD=false || true
        
        # Remove WEBSITE_RUN_FROM_PACKAGE if it exists
        az webapp config appsettings delete \
          --name ${{ env.AZURE_WEBAPP_NAME_FRONTEND }} \
          --resource-group "$RESOURCE_GROUP" \
          --setting-names WEBSITE_RUN_FROM_PACKAGE 2>/dev/null || true
        
        # Stop and restart to clear any locks
        az webapp stop --name ${{ env.AZURE_WEBAPP_NAME_FRONTEND }} \
          --resource-group "$RESOURCE_GROUP" || true
        sleep 5
        az webapp start --name ${{ env.AZURE_WEBAPP_NAME_FRONTEND }} \
          --resource-group "$RESOURCE_GROUP" || true
      continue-on-error: true
    
    - name: Deploy Frontend to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME_FRONTEND }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_FRONTEND }}
        package: apps/web/deploy.zip
        clean: true
        restart: true
      timeout-minutes: 15
      continue-on-error: true
      id: deploy-frontend
    
    - name: Retry Frontend Deployment if Failed
      if: steps.deploy-frontend.outcome == 'failure'
      run: |
        echo "First deployment attempt failed, waiting 30 seconds before retry..."
        sleep 30
        
        # Extract resource group from app name or use default
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "Warning: AZURE_RESOURCE_GROUP secret not set, trying to extract from app"
          # Try to get resource group from the app itself
          RESOURCE_GROUP=$(az webapp list --query "[?name=='${{ env.AZURE_WEBAPP_NAME_FRONTEND }}'].resourceGroup" -o tsv 2>/dev/null || echo "")
          if [ -z "$RESOURCE_GROUP" ]; then
            echo "Could not determine resource group, using default: finagent-rg"
            RESOURCE_GROUP="finagent-rg"
          fi
        fi
        echo "Using resource group: $RESOURCE_GROUP"
        
        # Try using Azure CLI directly
        az webapp deployment source config-zip \
          --resource-group "$RESOURCE_GROUP" \
          --name ${{ env.AZURE_WEBAPP_NAME_FRONTEND }} \
          --src apps/web/deploy.zip \
          --timeout 900 || exit 1

  configure-app-settings:
    name: Configure App Settings
    needs: [build-and-deploy-backend, build-and-deploy-frontend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Backend App Settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME_BACKEND }}
        app-settings-json: |
          [
            {
              "name": "NODE_ENV",
              "value": "production"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~20"
            },
            {
              "name": "WEBSITE_STARTUP_FILE",
              "value": "startup.sh"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "false"
            },
            {
              "name": "ENABLE_ORYX_BUILD",
              "value": "false"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0"
            },
            {
              "name": "POST_BUILD_COMMAND",
              "value": ""
            },
            {
              "name": "ALLOWED_ORIGINS",
              "value": "https://finagent-web-pps457j4wjrc6.azurewebsites.net,http://finagent-web-pps457j4wjrc6.azurewebsites.net"
            },
            {
              "name": "GROQ_API_KEY",
              "value": "${{ secrets.GROQ_API_KEY }}"
            },
            {
              "name": "AZURE_OPENAI_API_KEY",
              "value": "${{ secrets.AZURE_OPENAI_API_KEY }}"
            },
            {
              "name": "AZURE_OPENAI_ENDPOINT",
              "value": "${{ secrets.AZURE_OPENAI_ENDPOINT }}"
            },
            {
              "name": "PLAID_CLIENT_ID",
              "value": "${{ secrets.PLAID_CLIENT_ID }}"
            },
            {
              "name": "PLAID_SECRET",
              "value": "${{ secrets.PLAID_SECRET }}"
            },
            {
              "name": "PLAID_ENV",
              "value": "sandbox"
            },
            {
              "name": "SUPABASE_SERVICE_KEY",
              "value": "${{ secrets.SUPABASE_SERVICE_KEY }}"
            },
            {
              "name": "NEXT_PUBLIC_SUPABASE_URL",
              "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://fuaogvgmdgndldimnnrs.supabase.co' }}"
            },
            {
              "name": "NEXT_PUBLIC_SUPABASE_ANON_KEY",
              "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ1YW9ndmdtZGduZGxkaW1ubnJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM4NTU4OTAsImV4cCI6MjA0OTQzMTg5MH0.vFq6l6zVbG3M7MJBCymVcjJXNPiCrBvPBfqDOvLxvxo' }}"
            }
          ]

    - name: Set Frontend App Settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME_FRONTEND }}
        app-settings-json: |
          [
            {
              "name": "NODE_ENV",
              "value": "production"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~20"
            },
            {
              "name": "WEBSITE_STARTUP_FILE",
              "value": "startup.sh"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "false"
            },
            {
              "name": "ENABLE_ORYX_BUILD",
              "value": "false"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0"
            },
            {
              "name": "POST_BUILD_COMMAND",
              "value": ""
            },
            {
              "name": "NEXT_PUBLIC_SUPABASE_URL",
              "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://fuaogvgmdgndldimnnrs.supabase.co' }}"
            },
            {
              "name": "NEXT_PUBLIC_SUPABASE_ANON_KEY",
              "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ1YW9ndmdtZGduZGxkaW1ubnJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM4NTU4OTAsImV4cCI6MjA0OTQzMTg5MH0.vFq6l6zVbG3M7MJBCymVcjJXNPiCrBvPBfqDOvLxvxo' }}"
            },
            {
              "name": "NEXT_PUBLIC_API_URL",
              "value": "https://${{ env.AZURE_WEBAPP_NAME_BACKEND }}.azurewebsites.net"
            }
          ]