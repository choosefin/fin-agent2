/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 * 
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream, CronHandler } from 'motia'

declare module 'motia' {
  interface FlowContextStateStreams {
    
  }

  interface Handlers {
    'WorkflowWSRelay': EventHandler<{ workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex?: number; agent?: string; task?: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string }, never>
    'WorkflowTriggerHandler': EventHandler<{ workflowId: string; userId: string; message: string; context?: { symbols?: string[]; timeframe?: string; riskTolerance?: string }; agents: string[] }, { topic: 'workflow.started'; data: { workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex?: number; agent?: string; task?: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string } } | { topic: 'workflow.agent.started'; data: { workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex: number; agent: string; task: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string } }>
    'WorkflowStream': ApiRouteHandler<Record<string, unknown>, unknown, never>
    'WorkflowStreamBroadcaster': EventHandler<{ workflowId?: string; userId?: string; type?: string; stepIndex?: number; agent?: string; task?: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string }, never>
    'WorkflowStatus': ApiRouteHandler<Record<string, unknown>, unknown, never>
    'WorkflowSSERelay': EventHandler<{ workflowId: string; stepIndex: number; agent: string; task: string }, never>
    'WorkflowResult': ApiRouteHandler<Record<string, unknown>, unknown, never>
    'WorkflowOrchestrator': ApiRouteHandler<{ message: string; userId: string; context?: { symbols?: string[]; timeframe?: string; riskTolerance?: 'conservative' | 'moderate' | 'aggressive' } }, unknown, { topic: 'workflow.started'; data: { workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex?: number; agent?: string; task?: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string } } | { topic: 'workflow.agent.started'; data: { workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex: number; agent: string; task: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string } } | { topic: 'workflow.agent.completed'; data: { workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex?: number; agent?: string; task?: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string } } | { topic: 'workflow.completed'; data: { workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex?: number; agent?: string; task?: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string } }>
    'GetTradingViewChart': ApiRouteHandler<{ symbol: string; theme?: 'light' | 'dark'; height?: number; interval?: string; showToolbar?: boolean; allowSymbolChange?: boolean; studies?: string[]; embedType?: 'iframe' | 'widget' | 'config' }, unknown, { topic: 'chart.requested'; data: unknown }>
    'GetSymbolChartResponse': ApiRouteHandler<{ query: string; preferences?: { theme?: 'light' | 'dark'; defaultInterval?: string; preferredIndicators?: string[] } }, unknown, never>
    'StateAuditJob': CronHandler<{ topic: 'notification'; data: { templateId: string; email: string; templateData: Record<string, unknown> } }>
    'SSEBroadcaster': EventHandler<{ workflowId?: string; userId?: string; type?: string; stepIndex?: number; agent?: string; task?: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string }, never>
    'SaveChatMessage': ApiRouteHandler<{ sessionId: string; role: 'user' | 'assistant' | 'system'; content: string; threadId?: string; parentMessageId?: string; metadata?: { provider?: string; model?: string; tokens?: number; assistantType?: string; workflowId?: string } }, unknown, never>
    'QuickChart': ApiRouteHandler<Record<string, unknown>, unknown, never>
    'ProcessFoodOrder': EventHandler<{ email: string; quantity: number; petId: number }, { topic: 'notification'; data: { templateId: string; email: string; templateData: Record<string, unknown> } }>
    'ProcessChartRequest': EventHandler<unknown, never>
    'CreatePlaidLinkToken': ApiRouteHandler<{ userId: string }, unknown, never>
    'ExchangePlaidToken': ApiRouteHandler<{ publicToken: string; userId: string; institution?: unknown; accounts?: unknown[] }, unknown, never>
    'Notification': EventHandler<{ templateId: string; email: string; templateData: Record<string, unknown> }, never>
    'GetMarketData': ApiRouteHandler<{ symbol: string; dataType: 'quote' | 'historical' | 'options' | 'sentiment' | 'news'; timeframe?: string; startDate?: string; endDate?: string }, unknown, never>
    'HealthCheck': ApiRouteHandler<Record<string, unknown>, unknown, never>
    'CreateChatSession': ApiRouteHandler<{ userId: string; assistantType?: 'general' | 'analyst' | 'trader' | 'advisor' | 'riskManager' | 'economist'; initialMessage?: string }, unknown, never>
    'ChatWithAgent': ApiRouteHandler<{ message: string; assistantType: 'general' | 'analyst' | 'trader' | 'advisor' | 'riskManager' | 'economist'; userId: string; sessionId?: string; symbols?: string[] }, unknown, { topic: 'chart.requested'; data: unknown }>
    'ChatStream': ApiRouteHandler<{ message: string; assistantType?: 'general' | 'analyst' | 'trader' | 'advisor' | 'riskManager' | 'economist'; userId: string; context?: { symbols?: string[]; timeframe?: string; riskTolerance?: string } }, unknown, { topic: 'workflow.trigger'; data: { workflowId: string; userId: string; message: string; context?: { symbols?: string[]; timeframe?: string; riskTolerance?: string }; agents: string[] } } | { topic: 'chart.requested'; data: unknown }>
    'ChatStreamWS': ApiRouteHandler<{ message: string; assistantType?: 'general' | 'analyst' | 'trader' | 'advisor' | 'riskManager' | 'economist'; userId: string; streamId?: string; context?: { symbols?: string[]; timeframe?: string; riskTolerance?: string } }, unknown, { topic: 'workflow.trigger'; data: { workflowId: string; userId: string; message: string; context?: { symbols?: string[]; timeframe?: string; riskTolerance?: string }; agents: string[] } }>
    'ApiTrigger': ApiRouteHandler<{ pet: { name: string; photoUrl: string }; foodOrder?: { id: string; quantity: number } }, ApiResponse<200, { id: number; name: string; photoUrl: string }>, { topic: 'process-food-order'; data: { email: string; quantity: number; petId: number } }>
    'AgentExecutor': EventHandler<{ workflowId: string; stepIndex: number; agent: string; task: string }, { topic: 'workflow.agent.completed'; data: { workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex?: number; agent?: string; task?: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string } } | { topic: 'workflow.agent.progress'; data: { workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex?: number; agent?: string; task?: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string } } | { topic: 'workflow.completed'; data: { workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex?: number; agent?: string; task?: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string } } | { topic: 'workflow.agent.started'; data: { workflowId: string; userId?: string; streamKey?: string; type?: string; stepIndex: number; agent: string; task: string; data?: unknown; results?: unknown; message?: string; progress?: number; error?: string; timestamp?: string } }>
  }
}